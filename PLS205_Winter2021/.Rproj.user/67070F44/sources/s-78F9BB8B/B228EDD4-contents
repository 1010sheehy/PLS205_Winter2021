---
title: "HW 1"
output: 
 html_notebook:
    toc: true
    toc_float: true
    number_sections: true
---

Use this R Notebook document to answer the questions and document your work. 
Enter the R code used to answer each question in the corresponding R code chunk. 
Write any textual explanations **outside** of the chunks. 
Attempt to clean up your code as much as possible so that only the necessary lines remain. 

When you are done:

1. Select 'Run All' from the 'Run' dropdown menu.
2. Save (File -> Save)
3. Click 'Preview' to bring up the `HW1.nb.html` file. Check through this to make sure it rendered correctly.
4. Upload the files: `HW1.nb.html` and `HW1.Rmd` to Canvas.

---

# Part 1

Draw a diagram of an experiment that you are currently running, one that you have run in the past, or will run soon, 
or make up an experiment that is relevant to your research. Label the diagram using the terms we discussed in the first class. 
Try to show how you'll lay out your experiment; you don't have to be precise about where every sample will come from,
but try to show the overall structure of how you'll lay out your sampling strategy, how you'll assign treatments, and
what you'll measure. You can include a couple sentences below to help explain if it's helpful. The goal of this is to get you thinking
about the issues in experimental design, and to help me understand the range of questions students are studying.

To upload your diagram, save it as a file (jpeg, png, etc, but not pdf) in the directory of this .Rmd file, and include it's file name below:

Here's an example:

![](example_experiment.jpg)


> ![Experimental design for effect of audience familiarity on aggressive interactions in the Amazon molly, *P. formosa*.](~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/images/P.formosa_Familiarity_ExperimentalDesign.jpg)

**Note:** You can use PowerPoint or a drawing tool to create the diagram on your computer, or you can draw on paper, take a picture with your phone, and then download that file here.
    

---

# Part 2

When calculating $s^2$ to estimate the population variance ($\sigma^2$), we divide by $n-1$ instead of $n$. 
I mentioned in class that this was because once we know the **mean of a sample** ($\bar{y}$) and the first $n-1$ values,
we can calculate the $n$th value, so this last number is redundant; it doesn't contain any new information for us to use.

> Note: Put your cursor between each $..$ and hover your mouse over the text to see it rendered into pretty mathematics 

## Prove this by calculating the $n$th value for the data below:
Data: Plant heights (cm)
sample: 10, 18, 23, 9, 15, 12, 15
mean: 15.5 cm

```{r}
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions

# solving the algebraic problem, (10+18+23+9+15+12+15+n)/8 = 15.5
15.5*8-(10+18+23+9+15+12+15)

```

> n = 22 cm

## Estimate the Standard Deviation of the full population

```{r include=FALSE}
hw1 <- c(10, 18, 23, 9, 15, 12, 15, 22)
```

```{r}
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions

sd(hw1)

```

> SD = 5.209881 cm

## Estimate the Standard Error of the mean

```{r}
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
# you can use the answers to the intermediate results above directly rather than re-calculating them

hw1_stddev <- sd(hw1)

hw1_stderr <- hw1_stddev / sqrt(8)

hw1_stderr
```

> SE = 1.841971 cm

## Estimate the Coefficient of Variation of this population
The coefficient of variation (or CV) is defined as $\sigma/\mu$, i.e. the standard deviation divided by the population mean.
This is a normalized measure of the amount of variation in a population.

```{r}
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
# you can use the answers to the intermediate results above directly rather than re-calculating them

hw1_stddev/mean(hw1)
```

> Coeff. of Var = 0.3361213

a) What are the units of CV?

> There are no units for the coefficient of variation.

b) Say the original data were reported in mm instead of cm. How would the standard deviation of the sample change? How would the CV of the population change?


> The SD of the sample would be the same, just with the unit mm (instead of cm).

> The coeff. of var. would not change, as it is a unitless number.

c) Add 20cm to each value in the original sample (including the $n$th value). How would the standard deviation of the sample change? How would the CV of the population change?

```{r include=FALSE}
hw1_plus10 <- hw1 + 10

hw1_plus10_sd <- sd(hw1_plus10)

hw1_plus10_sd / mean(hw1_plus10)

```

> The SD does not change, as adding 10 to each value only serves to shift the curve on the x axis. It does not change the shape of the curve.

> However, the coefficient of variation does change from 0.3361213 to 0.204309. This is because adding 10 to the values increases the mean of the data, which is in the denominator of the coeff. of var. formula, thus decreasing the size of the coeff..


---

# Part 3

The following code runs a simulation of an experiment like we ran in class. 
Each iteration of the for-loop, we sample the pulse of someone sitting and someone standing and record those in two data vectors.
Run the simulation by clicking the green arrow in the code block below.

> Note: While the simulation is random, by putting `set.seed(1)` in the first line, we will always get the same random draws. But if you change the seed to a different number you'll get a different (but equally valid) simulated experiment.

```{r}
set.seed(1) # this makes the results repeatable 
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
    # measure a person sitting
    baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # their true baseline pulse
    person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured pulse - includes some measurement error and is rounded to the nearest 1 bpm
    simulation1_sitting[i] = person_sitting_i
    # measure a person standing
    baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # their true baseline pulse
    person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured pulse
    simulation1_standing[i] = person_standing_i
}
print("Sitting data")
print(simulation1_sitting)
print("Standing data")
print(simulation1_standing)
```

## Answer the following questions about this simulation:
a) How many people were in each treatment?
> 20 people per treatment

b) What is the TRUE effect of the treatment (in this simulation)?
> The true effect is an increase from a mean of 80bpm to 90 bpm.

c) What is the TRUE population variance?

```{r include = FALSE}

simulation1_sitting_var <- var(simulation1_sitting)

simulation1_standing_var <- var(simulation1_standing)

```

> The true population variance for sitting is \simulation1_sitting_var  

d) What is the TRUE Standard Error of the Difference for this experiment?


## Estimate the effect of standing on pulse in this simulated experiment and compare your answer with the TRUE value.

```{r}
# enter your code here.
```

> ENTER YOUR RESPONSE HERE

## What is the Error in your estimate? How does this compare to the TRUE Standard Error of the difference?

> ENTER YOUR RESPONSE HERE

-----

The following code runs a slight modification to the above experiment. 
Each iteration of the for-loop, instead of sampling two different people, we sample a single person and measure 
their pulse both sitting and standing.

> Note: in a real experiment, we'd randomize whether the sitting or standing treatment happend first. 
Here I've skipped this to make the code simpler
> Note2: You don't need to be able to create R code like below in this course, but it's good practice trying to read it and try to figure out how it works.

```{r}
set.seed(1)
simulation2 = c()
for(i in 1:20) {
    baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)   # baseline pulse of this person
    standing_i_effect = rnorm(n=1,mean=10,sd = 2)   # effect of standing on the pulse for this person
    sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))  # measured pulse when sitting
    standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1)) # measured pulse when standing
    treatment_effect_i = standing_pulse_i - sitting_pulse_i  # observed difference between sitting and standing for this person
    simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))  # collect the results
}
simulation2
```
## Estimate the effect of standing on pulse in this second simulated experiment and compare your answer with the TRUE value.
```{r}
# enter your code here.
```

> ENTER YOUR RESPONSE HERE

## Speculate on why the effect estimate in the second experiment was more accurate
Cover these areas:
a) Was more data collected in the second experiment?
b) Was the variance of the sitting pulses smaller? The variance of the standing pulses?
c) Was the second experiment more controlled?
d) Are the two experiments designed to measure the same thing?

> ENTER YOUR RESPONSE HERE

-----

In general, we only run an experiment once, or maybe a couple times. But on the computer we can run experiments hundreds of times and compare the results. Repeating experiments over and over is the conceptual idea behind "Standard Errors", Confidence intervals and p-values which we use to report what could happen in a replicate experiment. We use statistics to substitute for the effort of actually repeating experiments many times. But on the computer we can just do the replication directly!

The following code repeats the two experiments 100 times each, and collects the answers from each replicate.
Each iteration is a completely new experiment with new experimental units and new measurement errors.

```{r}
set.seed(1)
# repeat experiment-type1 100 times
type_1_results = c()
for(j in 1:100) {  # Each iteration of this for-loop we run both the Type1 and Type2 experiments
    simulation1_sitting = c()
    simulation1_standing = c()
    for(i in 1:20) {
        # measure person sitting
        baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # true pulse
        person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse - rounded to the 1 bpm
        simulation1_sitting[i] = person_sitting_i
        # measure person standing
        baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # true pulse
        person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse
        simulation1_standing[i] = person_standing_i
    }
    type_1_results[j] = mean(simulation1_standing) - mean(simulation1_sitting)
}
# repeat experiment-type2 100 times
type_2_results = c()
for(j in 1:100) {
    simulation2 = c()
    for(i in 1:20) {
        baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)
        standing_i_effect = rnorm(n=1,mean=10,sd = 2)
        sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))
        standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1))
        treatment_effect_i = standing_pulse_i - sitting_pulse_i
        simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))
    }
    type_2_results[j] = mean(simulation2$Effect)
}
boxplot(list(Type1 = type_1_results,Type2 = type_2_results))
# abline(h = 10)
```

## Calculate the standard deviation of the effect estimates for the Type1 and Type2 experiment
Compare these values to the TRUE Standard Error of a difference for the first experiment.
For an extra point, also calculate the TRUE Standard Error for the Type2 experiment.

```{r}
# enter your code here.
```

> ENTER YOUR RESPONSE HERE


