str(clover_means)
summary(clover)
clover <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
summary(clover)
clover_means <- aggregate(NLevel ~ Plot + Strain,clover,FUN = mean)
str(clover_means)
View(clover.dat)
View(clover.dat.renamed)
View(clover.dat)
View(clover.dat.renamed)
par(mfrow=c(1,2))
plot(means.model, which = c(1,2))
# This loads the data for this question
data_1 <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/wheat_roots.csv')
# This prints a summary of the data table
str(data_1)
data_1$Plant <- as.character(data_1$Plant)
summary(data_1)
Variety_A <- data_1$Root_length[data_1$Variety == 'A']
Variety_B <- data_1$Root_length[data_1$Variety == 'B']
data_1_diff <- mean(Variety_B) - mean(Variety_A)
data_1_diff
# SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
library(emmeans)
# lm()
data_1_lm1 <- lm(data_1$Root_length ~ data_1$Variety, data = data_1)
data_1_lm1
# emmeans()
data_1_emmeans_lm1 <- emmeans(data_1_lm1, spec = 'Variety')
data_1_emmeans_diff_lm1 <- contrast(data_1_emmeans_lm1, 'pairwise')
summary(data_1_emmeans_diff_lm1, level = 0.9, infer = c(T, T))
library(ggplot2)
# box and whisker plots
ggplot(data_1,
aes(x = Variety,
y = Root_length)) +
geom_boxplot() + geom_jitter(width = .2)
data_1_lm1_factor <- lm(data_1$Root_length ~ as.factor(data_1$Variety), data = data_1)
data_1_lm1_factor
# model fit
par(mfrow = c(1, 2))
plot(data_1_lm1_factor, which = c(2, 5))
# see: ?power.t.test
# SED
data_1_SED_power <- sqrt( (2.5)^2 / 16 + (2.5)^2 / 16)
data_1_SED_power
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A_power <- (2.5)^2
data_1_var_A_power
data_1_var_B_power <- (2.5)^2
data_1_var_B_power
# Pooling the variance
data_1_pooled_var_power <- ((16-1) * data_1_var_A_power + (16-1) * data_1_var_B_power) / ((16-1) + (16-1))
data_1_pooled_var_power
power.t.test(
n = 16,
delta = 3,
sd = sqrt(data_1_pooled_var_power),
sig.level = 0.1,
power = NULL,
type = 'two.sample',
alternative = 'two.sided'
)
delta = c(1,2,4,8,16)
# Here's a hit at how to calculate the sample size for the first delta
reps[1] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[1],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[2] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[2],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[3] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[3],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[4] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[4],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[5] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[5],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[1]
reps[2]
reps[3]
reps[4]
reps[5]
reps = c(reps[1:5])
# Here we make a table of the results.
ans_4.4 <- data.frame(delta,reps)
ans_4.4
clover <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
summary(clover)
clover_means <- aggregate(NLevel ~ Plot + Strain,clover,FUN = mean)
str(clover_means)
library(ggplot2)
library(emmeans)
library(car)
library(lme4)
library(lmerTest)
library(multcomp)
library(multcompView)
library(multcompView)
install.packages("multcompView")
library(multcompView)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
summary(clover.dat)
clover <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
summary(clover)
clover_means <- aggregate(NLevel ~ Plot + Strain,clover,FUN = mean)
str(clover_means)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
summary(clover.dat)
as.factor(clover.dat$Sample)
str(clover.dat)
clover.dat <- as.factor(clover.dat$Sample)
clover.dat <- as.factor(clover.dat$Strain)
clover.dat <- as.factor(clover.dat$Sample)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
clover.dat <- as.factor('clover.dat$Sample')
clover.dat <- as.factor('clover.dat$Strain')
str(clover.dat)
str(clover.dat)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
clover.dat <- as.factor('Sample')
str(clover.dat)
str(clover.dat)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
summary(clover.dat)
clover.dat$Plot <- interaction(clover.dat$Strain,clover.dat$Plot)
clover.dat$Plot
str(clover.dat)
clover.dat$Plot <- as.factor(clover.dat$Plot)
str(clover.dat)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
clover.dat$Plot <- as.factor(clover.dat$Plot)
clover.dat$Strain <- as.factor(clover.dat$Strain)
clover.dat$Sample <- as.factor(clover.dat$Sample)
str(clover.dat)
clover.dat$Plot <- as.factor(clover.dat$Plot)
clover.dat$Strain <- as.factor(clover.dat$Strain)
clover.dat$Sample <- as.factor(clover.dat$Sample)
str(clover.dat)
clover.dat$Plot <- interaction(clover.dat$Strain,clover.dat$Plot)
clover.dat$Plot
# Pooling the variance
data_1_pooled_var_power <- ((16-1) * data_1_var_A_power + (16-1) * data_1_var_B_power) / ((16-1) + (16-1))
# This loads the data for this question
data_1 <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/wheat_roots.csv')
# This prints a summary of the data table
str(data_1)
data_1$Plant <- as.character(data_1$Plant)
summary(data_1)
Variety_A <- data_1$Root_length[data_1$Variety == 'A']
Variety_B <- data_1$Root_length[data_1$Variety == 'B']
data_1_diff <- mean(Variety_B) - mean(Variety_A)
data_1_diff
# SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
library(emmeans)
# lm()
data_1_lm1 <- lm(data_1$Root_length ~ data_1$Variety, data = data_1)
data_1_lm1
# emmeans()
data_1_emmeans_lm1 <- emmeans(data_1_lm1, spec = 'Variety')
data_1_emmeans_diff_lm1 <- contrast(data_1_emmeans_lm1, 'pairwise')
summary(data_1_emmeans_diff_lm1, level = 0.9, infer = c(T, T))
library(ggplot2)
# box and whisker plots
ggplot(data_1,
aes(x = Variety,
y = Root_length)) +
geom_boxplot() + geom_jitter(width = .2)
data_1_lm1_factor <- lm(data_1$Root_length ~ as.factor(data_1$Variety), data = data_1)
data_1_lm1_factor
# model fit
par(mfrow = c(1, 2))
plot(data_1_lm1_factor, which = c(2, 5))
# see: ?power.t.test
# SED
data_1_SED_power <- sqrt( (2.5)^2 / 16 + (2.5)^2 / 16)
data_1_SED_power
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A_power <- (2.5)^2
data_1_var_A_power
data_1_var_B_power <- (2.5)^2
data_1_var_B_power
# Pooling the variance
data_1_pooled_var_power <- ((16-1) * data_1_var_A_power + (16-1) * data_1_var_B_power) / ((16-1) + (16-1))
data_1_pooled_var_power
power.t.test(
n = 16,
delta = 3,
sd = sqrt(data_1_pooled_var_power),
sig.level = 0.1,
power = NULL,
type = 'two.sample',
alternative = 'two.sided'
)
sqrt(data_1_pooled_var_power)
5+5+3+4+5+4+5+4+10
# Necessary pacakges
library(ggplot2)
library(car)
library(emmeans)
library(multcomp)
alpine_potato = read.csv('Alpine_Russet_yield.csv')
alpine_potato = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Alpine_Russet_yield.csv')
str(alpine_potato)
alpine_potato$NitrogenFactor = as.factor(alpine_potato$Nitrogen)
str(alpine_potato)
library(ggplot2)
ggplot(alpine_potato,aes(x=Nitrogen)) +
geom_boxplot(aes(y=Yield,group = Nitrogen),color = 'blue',position = position_identity()) +
# note: when x is a continuous variable, we must use 'group' to get boxes
ggtitle('Alpine Russet') + expand_limits(y=0)
factor_model <- lm(Yield ~ NitrogenFactor, alpine_potato)
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
library(emmeans)
factor_means <- emmeans(factor_model,'NitrogenFactor')
factor_differences <- contrast(factor_means,'pairwise')
summary(factor_differences,level = 0.9, infer=T)
anova(factor_model)
all_contrasts_data <- as.data.frame(factor_differences)
min(all_contrasts_data$p.value)
all_contrasts_data <- as.data.frame(factor_differences)
min(all_contrasts_data$p.value)
numeric_model = lm(Yield~Nitrogen, alpine_potato)
anova(numeric_model)
log10(0)
log2(3)
log(-3)
library(car)
p = 0.2
logit(p)
log(p/(1-p))  # these are the same
p = 0
logit(p)
log(p/(1-p))
log(0.025/(1-0.025))  # this is what logit(0) returns
sqrt(0)
sqrt(-1)
library(ggplot2)
data1 = read.csv('Perc_ex.csv')
library(ggplot2)
data1 = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Perc_ex.csv')
str(data1)
data1$Treatment = factor(data1$Treatment)
ggplot(data1,aes(x=Treatment,y=Germinated_seeds)) + geom_boxplot()
means = aggregate(Germinated_seeds ~ Treatment,data1,FUN=mean)$Germinated_seeds
vars = aggregate(Germinated_seeds ~ Treatment,data1,FUN=var)$Germinated_seeds
ggplot(data.frame(means,vars),aes(x=means,y=vars)) + geom_point() + xlab(expression(bar(y)[i])) + ylab(expression(s^2))
par(mfrow=c(1,2)) # set up plotting device for 2 side-by-side plots
untransformed_model = lm(Germinated_seeds~Treatment,data1)
plot(untransformed_model,which=c(2,3))  # several other plots are available. See ?plot.lm
library(car)
p = seq(0,1,length=100)
plot(p,logit(p),type='l', xlab = 'Original Scale',lwd=2)
# convert from germination counts to fraction (0-1)
data1$Fraction_germination = data1$Germinated_seeds/50
# apply angular transformation
data1$logit_Y = logit(data1$Fraction_germination)  # see optional parameter adjusts = to change how the function deals with values close to 0 or 1.
par(mfrow=c(1,2)) # set up plotting device for 2 side-by-side plots
transformed_model = lm(logit_Y~Treatment,data1)
plot(transformed_model,which=c(2,3))  # several other plots are available. See ?plot.lm
untransformed_means = emmeans(untransformed_model,specs = 'Treatment')
cld(untransformed_means,alpha = 0.1)
transformed_means = emmeans(transformed_model,specs = 'Treatment')
cld(transformed_means,alpha = 0.1)
y = 10
# natural log:
log_y = log(y)
detransformated_log_y = exp(log_y)
detransformated_log_y
# log-base2:
log2_y = log2(y)
detransformated_log2_y = 2^log2_y
detransformated_log2_y
detransformed_means_table = as.data.frame(transformed_means)
detransformed_means_table$emmean = exp(detransformed_means_table$emmean)/(1+exp(detransformed_means_table$emmean))
detransformed_means_table$lower.CL = exp(detransformed_means_table$lower.CL)/(1+exp(detransformed_means_table$lower.CL))
detransformed_means_table$upper.CL = exp(detransformed_means_table$upper.CL)/(1+exp(detransformed_means_table$upper.CL))
detransformed_means_table
direct_transformed_model = lm(logit(Fraction_germination)~Treatment,data1)
direct_transformed_means = emmeans(direct_transformed_model,specs = 'Treatment')
summary(direct_transformed_means,type='response')
detransformed_means_table = as.data.frame(transformed_means)
detransformed_means_table$emmean = exp(detransformed_means_table$emmean)/(1+exp(detransformed_means_table$emmean))
detransformed_means_table$lower.CL = exp(detransformed_means_table$lower.CL)/(1+exp(detransformed_means_table$lower.CL))
detransformed_means_table$upper.CL = exp(detransformed_means_table$upper.CL)/(1+exp(detransformed_means_table$upper.CL))
detransformed_means_table
library(ggplot2)
library(emmeans)
library(lme4)
library(lmerTest)
library(car)
# Ensure the data file is in the same directory as this document
germinant_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Germination.csv')
str(germinant_data)
library(emmeans)
library(ggplot2)
clover <- read.csv('Clover_data.csv')
par(mfrow=c(1,2))
plot(clover_model,which=2:3)
germinant_data$DaysFactor = as.factor(germinant_data$Days)
str(DaysFactor)
str(germinant_data)
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot() + geom_jitter()
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
germ_model <- lmer(Germinants ~ DaysFactor + (1|Bag), data = germinant_data)
op = par(mfrow=c(1,2))
plot(germ_model,which = c(2,3))
# germination model
germ_model <- lmer(Germinants ~ DaysFactor + (1|Bag), data = germinant_data)
# diagnostic plots
op = par(mfrow=c(1,2))
plot(germ_model,which = c(2,3))
library(ggplot2)
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=germinants,group = DaysFactor),color = 'blue',position = position_identity()) +
# note: when x is a continuous variable, we must use 'group' to get boxes
ggtitle('Seed Aging') + expand_limits(y=0)
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),color = 'blue',position = position_identity()) +
# note: when x is a continuous variable, we must use 'group' to get boxes
ggtitle('Seed Aging') + expand_limits(y=0)
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
# note: when x is a continuous variable, we must use 'group' to get boxes
ggtitle('Seed Aging') + expand_limits(y=0)
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
ggtitle('Seed Aging') + expand_limits(y=0)
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
ggtitle('Seed Aging') + expand_limits(y=0)
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
#inspecting the germination data
ggplot(germinant_data,aes(x=DaysFactor,y=Germinants)) + geom_boxplot()
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
ggtitle('Seed Aging') + expand_limits(y=0)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
library(emmeans)
germ_emmeans <- emmeans(germ_model,'DaysFactor')
factor_differences <- contrast(germ_emmeans,'pairwise')
summary(factor_differences,level = 0.9, infer=T)
levels(germinant_data$DaysFactor)
germ_emmeans <- emmeans(germ_model, trt.vs.ctrl ~ DaysFactor, ref = 1)
summary(germ_emmeans,level = 0.9, infer= c(T,T))$contrast
# examine levels of Days to find control
levels(germinant_data$DaysFactor)
# comparing treatments to the control (Zero days)
library(emmeans)
germ_emmeans <- emmeans(germ_model, trt.vs.ctrl ~ DaysFactor, ref = 1)
summary(germ_emmeans,level = 0.9, infer= c(T,T))$contrast
summary(germ_emmeans,level = 0.95, infer= c(T,T))$contrast
?anova()
# conducting ANOVA
anova(germ_model, ddf = 'Kenward-Roger')
# incorrect ANOVA
anova(germ_model)
# conducting ANOVA
anova(germ_model, ddf = 'Kenward-Roger')
# incorrect ANOVA
anova(germ_model)
#inspecting the germination data
library(ggplot2)
ggplot(germinant_data,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
ggtitle('Seed Aging') + expand_limits(y=0)
# germination model
germ_model <- lmer(Germinants ~ DaysFactor + (1|Bag), data = germinant_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
# grouping subsamples
germinant_means = aggregate(Germinants ~ Bag + DaysFactor , data = germinant_data, FUN = mean)
# grouping subsamples
germinant_means = aggregate(Germinants ~ Bag + DaysFactor , data = germinant_data, FUN = mean)
#inspecting the germination data
library(ggplot2)
ggplot(germinant_means,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
ggtitle('Seed Aging') + expand_limits(y=0)
# germination model
germ_model <- lmer(Germinants ~ DaysFactor + (1|Bag), data = germinant_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
# conducting ANOVA
anova(germ_model, ddf = 'Kenward-Roger')
# incorrect ANOVA
anova(germ_model)
# incorrect ANOVA
germ_model_wrong <- lm(Germinants ~ DaysFactor + Bag, data = germinant_data)
# conducting ANOVA
anova(germ_model, ddf = 'Kenward-Roger')
# incorrect ANOVA
germ_model_wrong <- lm(Germinants ~ DaysFactor + Bag, data = germinant_data)
anova(germ_model_wrong)
> 1. The degrees of freedom (5) is because the experimental units are 6 (6 day-length treatments) and df = EU - 1.
> 2. The MSE = SSE/DfE = = s^2
```{r}
MSE <- 4439.8 / 5
MSE
```
> 1. The degrees of freedom (5) is because the experimental units are 6 (6 day-length treatments) and df = EU - 1.
> 2. The MSE = SSE/DfE = = s^2
```{r}
MSE = 4439.8 / 5
MSE
```
> 1. The degrees of freedom (5) is because the experimental units are 6 (6 day-length treatments) and df = EU - 1.
> 2. The MSE = SSE/DfE = = s^2
```{r}
germinant_MSE = 4439.8 / 5
MSE
```
> 1. The degrees of freedom (5) is because the experimental units are 6 (6 day-length treatments) and df = EU - 1.
> 2. The MSE = SSE/DfE = = s^2
```{r}
germinant_MSE = 4439.8 / 5
MSE
# MSE using germ_model_wrong
germ_wrong_MSE = 25023.1 / 5
germ_wrong_MSE
NO_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/NO_data.csv')
str(NO_data)
4*6*6
