sample_means = rep(NA,100)
for(i in 1:100){ # do 100 experiments
sample_of_fish = rnorm(n = 10, mean = 106, sd = 30)  # sample 10 fish
sample_means[i] = mean(sample_of_fish) # record the sample mean
}
sample_means
sample_means = rep(NA,100)
for(i in 1:100){ # do 100 experiments
sample_of_fish = rnorm(n = 10, mean = 106, sd = 30)  # sample 10 fish
sample_means[i] = mean(sample_of_fish) # record the sample mean
}
sample_means
mean(sample_means)
sd(sample_means)
hist(sample_means,xlim = c(0,300),prob = T)
# add line for expected distribution
x_positions = seq(0,300)  # create a list of x-values
y_positions = dnorm(x,mean = 106,sd = 30/sqrt(10))  # at each x-value, calculate the distribution at that point
lines(x_positions,y_positions)
sample_means = rep(NA,100)
for(i in 1:100){ # do 100 experiments
sample_of_fish = rnorm(n = 10, mean = 106, sd = 10)  # sample 10 fish
sample_means[i] = mean(sample_of_fish) # record the sample mean
}
sample_means
mean(sample_means)
sd(sample_means)
hist(sample_means,xlim = c(0,300),prob = T)
# add line for expected distribution
x_positions = seq(0,300)  # create a list of x-values
y_positions = dnorm(x,mean = 106,sd = 30/sqrt(10))  # at each x-value, calculate the distribution at that point
lines(x_positions,y_positions)
sample_means = rep(NA,100)
for(i in 1:100){ # do 100 experiments
sample_of_fish = rnorm(n = 10, mean = 106, sd = 30)  # sample 10 fish
sample_means[i] = mean(sample_of_fish) # record the sample mean
}
sample_means
SE = sample_sd / sqrt(n)
SE
alpha = 0.05
t_crit = qt(p = 1-alpha/2,df = n-1)  # this gives the value greater than 1-0.05/2 = .975 possible values from the t-distribution
t_crit
CI = sample_mean + c(-t_crit * SE, t_crit*SE)
CI
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.05
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * SE, t_crit * SE)
CI
# t-test
t_test_result = t.test(x=,  # your data
y = NULL,          # NULL, because it's a one-sample test (testing mean against known value)
mu = mu,           # mean of the null hypothesis
alternative = 'two.sided',     # two-sided alternative hypothesis
conf.level = 1-alpha    # confidence level (desired frequence)
)
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.05
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * SE, t_crit * SE)
CI
?emmeans
lm(data_1$Root_length ~ data_1$Variety, data = data_1)
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 15 + sd(Variety_B)^2 / 15)
data_1_SED
# This loads the data for this question
data_1 <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/wheat_roots.csv')
# This prints a summary of the data table
str(data_1)
data_1$Plant <- as.character(data_1$Plant)
summary(data_1)
Variety_A <- data_1$Root_length[data_1$Variety == 'A']
Variety_B <- data_1$Root_length[data_1$Variety == 'B']
data_1_diff <- mean(Variety_B) - mean(Variety_A)
data_1_diff
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 15 + sd(Variety_B)^2 / 15)
data_1_SED
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * SE, t_crit * SE)
CI
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED
CI
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 15 + sd(Variety_B)^2 / 15)
data_1_SED
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
data_1_lm <- lm(data_1$Root_length ~ data_1$Variety, data = data_1)
data_1_lm
model_1 <- lm(Malt ~ Variety, data = barley_data_tall)  # fit the model
model_1  # git a quick summary of the fit to make sure it worked
mean_A <- mean(Variety_A)
mean_A
data_1_lm <- lm(data_1$Root_length ~ data_1$Variety, data = data_1)
data_1_lm
library(emmeans)  # load the  emmeans package
means_model1 <- emmeans(model_1,spec = 'Variety') # prep the emmeans
summary(means_model1,level = 0.95, infer = c(T,F)) # show confidence intervals
data_1_emmeans <- emmeans(data_1_lm, spec = 'Variety')
data_1_emmeans
data_1_lm1 <- lm(data_1$Root_length ~ data_1$Variety, data = data_1)
data_1_lm1
data_1_emmeans_lm1 <- emmeans(data_1_lm1, spec = 'Variety')
summary(data_1_emmeans, level = 0.9, infer = c(T,F))
data_1_emmeans_lm1 <- emmeans(data_1_lm1, spec = 'Variety')
data_1_emmeans_lm1
summary(data_1_emmeans, level = 0.9, infer = c(T,F))
summary(data_1_emmeans, level = 0.9, infer = c(T,T))
summary(data_1_emmeans, level = 0.9, infer = c(T,F))
data_1_emmeans_diff_lm1 <- contrast(data_1_emmeans_lm1, level = 0.9, infer = c(T, F))
summary(data_1_emmeans_diff_lm1)
data_1_emmeans_lm1 <- emmeans(data_1_lm1, spec = 'Variety')
data_1_emmeans_diff_lm1 <- contrast(data_1_emmeans_lm1, 'pairwise')
summary(data_1_emmeans_diff_lm1, level = 0.9, infer = c(T, F))
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
# Pooling the variance
data_1_pooled_var <- ((16) * data_1_var_A + (16) * data_1_var_B) / ((16) + (16))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
# Pooling the variance
data_1_pooled_var <- ((16) * data_1_var_A + (16) * data_1_var_B) / ((16) + (16))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 15 + sd(Variety_B)^2 / 15)
data_1_SED
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16) * data_1_var_A + (16) * data_1_var_B) / ((16) + (16))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 15 + sd(Variety_B)^2 / 15)
data_1_SED
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
# Calculating SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
library(emmeans)
# lm()
data_1_lm1 <- lm(data_1$Root_length ~ data_1$Variety, data = data_1)
data_1_lm1
# emmeans()
data_1_emmeans_lm1 <- emmeans(data_1_lm1, spec = 'Variety')
data_1_emmeans_diff_lm1 <- contrast(data_1_emmeans_lm1, 'pairwise')
summary(data_1_emmeans_diff_lm1, level = 0.9, infer = c(T, F))
# SED
data_1_SED <- sqrt( sd(Variety_A)^2 / 16 + sd(Variety_B)^2 / 16)
data_1_SED
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A <- var(Variety_A)
data_1_var_A
data_1_var_B <- var(Variety_B)
data_1_var_B
# Pooling the variance
data_1_pooled_var <- ((16-1) * data_1_var_A + (16-1) * data_1_var_B) / ((16-1) + (16-1))
data_1_pooled_var
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
CI <- data_1_diff + c(-t_crit * SE, t_crit * SE)
CI
SE <- data_1_SED / sqrt(16)
SE
alpha <- 0.1
t_crit = qt(p = 1-alpha/2, df = 16-1)
t_crit
CI <- data_1_diff + c(-t_crit * data_1_SED, t_crit * data_1_SED)
CI
summary(data_1_emmeans_diff_lm1, level = 0.9, infer = c(T, T))
(data_1_var_A + data_1_var_B) / 2
# see: ?power.t.test
power.t.test(
n = 16,
delta = 1,
sd = sqrt(data_1_pooled_var),
sig.level = 0.1,
power = NULL,
type = 'two.sample',
alternative = 'two.sided'
)
data_1_SED <- sqrt( (2,5)^2 / 16 + (2.5)^2 / 16)
data_1_SED_power <- sqrt( (2.5)^2 / 16 + (2.5)^2 / 16)
data_1_SED_power
power.t.test(
n = 16,
delta = 3,
sd = sqrt(data_1_pooled_var),
sig.level = 0.1,
power = NULL,
type = 'two.sample',
alternative = 'two.sided'
)
# see: ?power.t.test
# SED
data_1_SED_power <- sqrt( (2.5)^2 / 16 + (2.5)^2 / 16)
data_1_SED_power
# Variance
# Using var() to determine the variance for Varieties A and B
data_1_var_A_power <- (2.5)^2
data_1_var_A_power
data_1_var_B_power <- (2.5)^2
data_1_var_B_power
# Pooling the variance
data_1_pooled_var_power <- ((16-1) * data_1_var_A_power + (16-1) * data_1_var_B_power) / ((16-1) + (16-1))
data_1_pooled_var_power
power.t.test(
n = 16,
delta = 3,
sd = sqrt(data_1_pooled_var_power),
sig.level = 0.1,
power = NULL,
type = 'two.sample',
alternative = 'two.sided'
)
reps[1] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[1],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
delta = c(1,2,4,8,16)
reps = c(1,2,4,8,16)
reps[1] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[1],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[1]
reps[reps] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[1],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[reps]
reps[1] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[1],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[1]
reps[delta] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[1] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[1],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[1]
reps[2]
reps[2] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[2],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[2]
reps[3] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[3],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[3] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[3],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[3]
reps[4] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[4],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[4]
reps[5] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[5],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[6] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[6],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[4] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[4],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[5] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[5],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps[6] <- power.t.test(n = NULL,  # make sure to fill in ALL of the ?
delta = delta[6],
sd = 4,
sig.level = 0.01,
power = 0.9,
type = 'two.sample',
alternative = 'two.sided'
)$n
reps = c(reps[1:5])
# Here we make a table of the results.
ans_4.4 <- data.frame(delta,reps)
ans_4.4
## Estimate the standard error of this difference. Assume the variances of the two varieties are the same, and find a pooled estimate of the variance.
```{r, include = FALSE}
## Form a 90% confidence interval for this difference
```{r, include = FALSE}
## Repeat the analysis using the `lm` and `emmeans` functions. Do you get the same answer?
```{r, include = FALSE}
library(ggplot2)
ggplot(data_1,
aes(x = data_1$Variety,
y = data_1$Root_length)) +
geom_boxplot() + geom_jitter(width = .2)
ggplot(data_1,
aes(x = 'Variety',
y = 'Root_length')) +
geom_boxplot() + geom_jitter(width = .2)
data_1$Variety
ggplot(data_1,
aes(x = data_1$Variety,
y = data_1$Root_length)) +
geom_boxplot() + geom_jitter(width = .2)
ggplot(data_1,
aes(x = Variety,
y = Root_length)) +
geom_boxplot() + geom_jitter(width = .2)
# model fit
par(mfrow = c(1, 2))
plot(model_1, which = c(2,5))
plot(model_1, which = c(2, 5))
plot(data_1_lm, which = c(2, 5))
data_1_lm1_factor <- lm(data_1$Root_length ~ as.factor(data_1$Variety), data = data_1)
plot(data_1_lm1_factor, which = c(2, 5))
## Calculate the power of the test to detect a difference of 3cm, with n=16 and alpha = 0.1. Assume the within-variety standard deviation is is 2.5cm
```{r, include = false}
## Calculate the power of the test to detect a difference of 3cm, with n=16 and alpha = 0.1. Assume the within-variety standard deviation is is 2.5cm
```{r, include = FALSE}
