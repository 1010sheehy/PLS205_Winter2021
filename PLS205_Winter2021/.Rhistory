```{r}
germinant_MSE = 4439.8 / 5
MSE
# MSE using germ_model_wrong
germ_wrong_MSE = 25023.1 / 5
germ_wrong_MSE
NO_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/NO_data.csv')
str(NO_data)
4*6*6
library(ggplot2)
library(emmeans)
library(lme4)
library(lmerTest)
library(car)
# Ensure the data file is in the same directory as this document
germinant_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Germination.csv')
str(germinant_data)
germinant_data$DaysFactor = as.factor(germinant_data$Days)
str(germinant_data)
# grouping subsamples
germinant_means = aggregate(Germinants ~ Bag + DaysFactor , data = germinant_data, FUN = mean)
#inspecting the germination data
library(ggplot2)
ggplot(germinant_means,aes(x=DaysFactor)) +
geom_boxplot(aes(y=Germinants,group = DaysFactor),position = position_identity()) +
ggtitle('Seed Aging') + expand_limits(y=0)
NO_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/NO_data.csv')
str(NO_data)
# NO flux model
NO_model <- lmer(Flux ~ Cover + (1|Plot) + Rep, data = NO_data)
plot_asfactor <- as.factor(NO_data$Plot)
rep_asfactor <- as.factor(NO_data$Rep)
cover_asfactor <- as.factor(NO_data$Cover)
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + (1|plot_asfactor) + rep_asfactor, data = NO_data)
anova(factor_model)
# MSE using germ_model
887.95/37.678
# MSE using germ_model
germ_model_MSE <- 887.95/37.678
germ_model_MSE
# MSE using germ_model_wrong
germ_wrong_MSE <- 5004.6/68.825
germ_wrong_MSE
# MSE using germ_model
germ_model_MSE <- 887.95/37.678
germ_model_MSE
# MSE using germ_model_wrong
germ_wrong_MSE <- 5004.6/68.825
germ_wrong_MSE
4439.8/5
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor + plot_asfactor + rep_asfactor, data = NO_data)
summary(NO_data)
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
devtools::install_github('deruncie/PLS205_package')
library(ggplot2)
library(emmeans)
library(lme4)
library(lmerTest)
library(PLS205)
expression_data = read.csv('sp1_expression.csv',stringsAsFactors = TRUE)
expression_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/sp1_expression.csv',stringsAsFactors = TRUE)
str(expression_data)
# set up variables as factors
plot_asfactor <- as.factor(NO_data$Plot)
rep_asfactor <- as.factor(NO_data$Rep)
cover_asfactor <- as.factor(NO_data$Cover)
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + (1|rep_asfactor), data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
is_nested = function(outer_term,inner_term,data) {
all(colSums(table(data[[outer_term]],data[[inner_term]]) > 0L) == 1L)
}
is_aliased = function(term1, term2, data) {
is_nested(term1,term2,data) & is_nested(term2,term1,data)
}
is_aliased('Pot','Plant',expression_data)
is_aliased('Pot','Chamber',expression_data)
pls205_diagnostics = function(model_fit,EU = NULL) {
# note: for lmer models, be sure to specify the EU that you are interested in!
if(is(model_fit,'lm')) {
# diagnostics for lm-type model
eu_data = data.frame(fitted = fitted(model_fit),EU_std_resid = rstandard(model_fit))
} else if(is(model_fit,'lmerMod')) {
if(is.null(EU)) {
# plot observations
eu_data = data.frame(fitted = fitted(model_fit),EU_std_resid = resid(model_fit))
} else {
# plot estimated values of EU
if(!EU %in% all.vars(formula(model_fit))) stop(sprintf('Your EU (%s) is not in the model you provided',EU))
eu_data = data.frame(EU_obs = predict(model_fit,re.form = formula(sprintf('~(1|%s)',EU))),fitted = predict(model_fit,re.form=NA),model_fit@frame)
eu_data = eu_data[!duplicated(eu_data[[EU]]),]
eu_data = eu_data[order(eu_data[[EU]]),]
ranefs = as.data.frame(ranef(model_fit,condVar=T))
ranefs$condsd = ranefs$condsd/mean(ranefs$condsd)
eu_data$EU_std_resid = (ranefs$condval/ranefs$condsd)[match(eu_data[[EU]],ranefs$grp)]
}
}
op = par(mfrow=c(1,2))
eu_data$sq_std_resids = sqrt(abs(eu_data$EU_std_resid))
car::qqPlot(eu_data$EU_std_resid,main = 'Plot (EU) Normal Q-Q',pch=19,ylab = 'Observed')  # new qqplot function
plot(eu_data$fitted,eu_data$sq_std_resids,type='n',main = 'Scale-Location',ylab = expression(sqrt(abs(' deviations '))),xlab = 'Fitted values',ylim = c(0,max(eu_data$sq_std_resids)))
panel.smooth(eu_data$fitted,eu_data$sq_std_resids)
par(op)
invisible(eu_data)
}
pls205_diagnostics(expression_model,EU = 'Chamber')
devtools::install_github('deruncie/PLS205_package')
library(ggplot2)
library(emmeans)
library(lme4)
library(lmerTest)
library(PLS205)
expression_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/sp1_expression.csv',stringsAsFactors = TRUE)
str(expression_data)
is_nested = function(outer_term,inner_term,data) {
all(colSums(table(data[[outer_term]],data[[inner_term]]) > 0L) == 1L)
}
is_aliased = function(term1, term2, data) {
is_nested(term1,term2,data) & is_nested(term2,term1,data)
}
is_aliased('Pot','Plant',expression_data)
is_aliased('Pot','Chamber',expression_data)
is_nested(outer_term = "Chamber",inner_term = 'Pot',data = expression_data)
is_nested(outer_term = "Chamber",inner_term = 'Temperature',data = expression_data)
is_nested(outer_term = "Temperature", inner_term = "Chamber", data = expression_data)
expression_model = lmer(sp1_expression ~ Temperature + (1|Chamber) + (1|Pot) + (1|Leaf), data = expression_data)
pls205_diagnostics = function(model_fit,EU = NULL) {
# note: for lmer models, be sure to specify the EU that you are interested in!
if(is(model_fit,'lm')) {
# diagnostics for lm-type model
eu_data = data.frame(fitted = fitted(model_fit),EU_std_resid = rstandard(model_fit))
} else if(is(model_fit,'lmerMod')) {
if(is.null(EU)) {
# plot observations
eu_data = data.frame(fitted = fitted(model_fit),EU_std_resid = resid(model_fit))
} else {
# plot estimated values of EU
if(!EU %in% all.vars(formula(model_fit))) stop(sprintf('Your EU (%s) is not in the model you provided',EU))
eu_data = data.frame(EU_obs = predict(model_fit,re.form = formula(sprintf('~(1|%s)',EU))),fitted = predict(model_fit,re.form=NA),model_fit@frame)
eu_data = eu_data[!duplicated(eu_data[[EU]]),]
eu_data = eu_data[order(eu_data[[EU]]),]
ranefs = as.data.frame(ranef(model_fit,condVar=T))
ranefs$condsd = ranefs$condsd/mean(ranefs$condsd)
eu_data$EU_std_resid = (ranefs$condval/ranefs$condsd)[match(eu_data[[EU]],ranefs$grp)]
}
}
op = par(mfrow=c(1,2))
eu_data$sq_std_resids = sqrt(abs(eu_data$EU_std_resid))
car::qqPlot(eu_data$EU_std_resid,main = 'Plot (EU) Normal Q-Q',pch=19,ylab = 'Observed')  # new qqplot function
plot(eu_data$fitted,eu_data$sq_std_resids,type='n',main = 'Scale-Location',ylab = expression(sqrt(abs(' deviations '))),xlab = 'Fitted values',ylim = c(0,max(eu_data$sq_std_resids)))
panel.smooth(eu_data$fitted,eu_data$sq_std_resids)
par(op)
invisible(eu_data)
}
pls205_diagnostics(expression_model,EU = 'Chamber')
str(NO_data)
summary(NO_data)
24*6
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + (1|plot_asfactor), data = NO_data)
View(germinant_means)
View(NO_data)
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + (1|rep_asfactor), data = NO_data)
# set up variables as factors
plot_asfactor <- as.factor(NO_data$Plot)
rep_asfactor <- as.factor(NO_data$Rep)
cover_asfactor <- as.factor(NO_data$Cover)
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + (1|rep_asfactor), data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + (1|cover_asfactor:rep_asfactor), data = NO_data)
# NO flux model
NO_model <- lmer(Flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
plot(factor_model,which=c(2,5))
# Necessary pacakges
library(ggplot2)
library(car)
library(emmeans)
library(multcomp)
alpine_potato = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Alpine_Russet_yield.csv')
str(alpine_potato)
alpine_potato$NitrogenFactor = as.factor(alpine_potato$Nitrogen)
str(alpine_potato)
library(ggplot2)
ggplot(alpine_potato,aes(x=Nitrogen)) +
geom_boxplot(aes(y=Yield,group = Nitrogen),color = 'blue',position = position_identity()) +
# note: when x is a continuous variable, we must use 'group' to get boxes
ggtitle('Alpine Russet') + expand_limits(y=0)
factor_model <- lm(Yield ~ NitrogenFactor, alpine_potato)
par(mfrow=c(1,2))
plot(factor_model,which=c(2,5))
library(emmeans)
factor_means <- emmeans(factor_model,'NitrogenFactor')
factor_differences <- contrast(factor_means,'pairwise')
summary(factor_differences,level = 0.9, infer=T)
anova(factor_model)
all_contrasts_data <- as.data.frame(factor_differences)
min(all_contrasts_data$p.value)
numeric_model = lm(Yield~Nitrogen, alpine_potato)
anova(numeric_model)
log10(0)
log2(3)
log(-3)
library(car)
p = 0.2
logit(p)
log(p/(1-p))  # these are the same
p = 0
logit(p)
log(p/(1-p))
log(0.025/(1-0.025))  # this is what logit(0) returns
sqrt(0)
sqrt(-1)
library(ggplot2)
data1 = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Perc_ex.csv')
str(data1)
data1$Treatment = factor(data1$Treatment)
ggplot(data1,aes(x=Treatment,y=Germinated_seeds)) + geom_boxplot()
means = aggregate(Germinated_seeds ~ Treatment,data1,FUN=mean)$Germinated_seeds
vars = aggregate(Germinated_seeds ~ Treatment,data1,FUN=var)$Germinated_seeds
ggplot(data.frame(means,vars),aes(x=means,y=vars)) + geom_point() + xlab(expression(bar(y)[i])) + ylab(expression(s^2))
means = aggregate(Germinated_seeds ~ Treatment,data1,FUN=mean)$Germinated_seeds
vars = aggregate(Germinated_seeds ~ Treatment,data1,FUN=var)$Germinated_seeds
ggplot(data.frame(means,vars),aes(x=means,y=vars)) + geom_point() + xlab(expression(bar(y)[i])) + ylab(expression(s^2))
par(mfrow=c(1,2)) # set up plotting device for 2 side-by-side plots
untransformed_model = lm(Germinated_seeds~Treatment,data1)
plot(untransformed_model,which=c(2,3))  # several other plots are available. See ?plot.lm
library(ggplot2)
data1 = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Perc_ex.csv')
str(data1)
data1$Treatment = factor(data1$Treatment)
ggplot(data1,aes(x=Treatment,y=Germinated_seeds)) + geom_boxplot()
library(car)
p = seq(0,1,length=100)
plot(p,logit(p),type='l', xlab = 'Original Scale',lwd=2)
# apply angular transformation
NO_data$logit_Y <- logit(NO_data$Flux)
NO_logit_model <- lm(logit_Y ~ cover_asfactor + rep_asfactor, data = NO_data)
plot(NO_model,which=c(2,5))
# apply angular transformation
NO_data$logit_Y <- logit(NO_data$Flux)
NO_logit_model <- lm(logit_Y ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_logit_model,which=c(2,5))
# apply angular transformation
NO_data$log10_flux <- log10(NO_data$Flux)
NO_log10_model <- lm(log10_flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_log10_model,which=c(2,5))
# apply angular transformation
NO_data$log2_flux <- log2(NO_data$Flux)
NO_log2_model <- lm(log2_flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_log2_model,which=c(2,5))
# apply angular transformation
NO_data$log_flux <- log(NO_data$Flux)
NO_log_model <- lm(log_flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_log_model,which=c(2,5))
# apply angular transformation
NO_data$log_flux <- log(NO_data$Flux)
NO_log_model <- lm(log_flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_log_model,which=c(2,5))
# set up variables as factors
plot_asfactor <- as.factor(NO_data$Plot)
rep_asfactor <- as.factor(NO_data$Rep)
cover_asfactor <- as.factor(NO_data$Cover)
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_model,which=c(2,5))
# apply angular transformation
NO_data$logit_flux <- logit(NO_data$Flux)
NO_logit_model <- lm(logit_flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_logit_model,which=c(2,5))
# set up variables as factors
plot_asfactor <- as.factor(NO_data$Plot)
rep_asfactor <- as.factor(NO_data$Rep)
cover_asfactor <- as.factor(NO_data$Cover)
# NO flux model
NO_model <- lm(Flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_model,which=c(2,5))
# apply angular transformation
NO_data$log_flux <- log(NO_data$Flux)
NO_log_model <- lm(log_flux ~ cover_asfactor + rep_asfactor, data = NO_data)
# diagnostic plots
par(mfrow=c(1,2))
plot(NO_log_model,which=c(2,5))
# apply angular transformation
NO_data$power_flux <- powerTransform(NO_data$Flux)
# apply angular transformation
NO_data$power_flux <- powerTransform(NO_data$Flux)
differences_vs_control = emmeans(clover.mod,trt.vs.ctrl~Culture,ref = 6)  # ref = 6, because the control is the 6th Culture
library(ggplot2)
library(emmeans)
library(car)
library(lme4)
library(lmerTest)
library(multcomp)
library(multcompView)
clover.dat <- read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Clover_data.csv')
str(clover.dat)
summary(clover.dat)
clover.dat$Plot <- as.factor(clover.dat$Plot)
clover.dat$Strain <- as.factor(clover.dat$Strain)
clover.dat$Sample <- as.factor(clover.dat$Sample)
str(clover.dat)
clover.dat$Plot <- interaction(clover.dat$Strain,clover.dat$Plot)
clover.dat$Plot
library(ggplot2)
ggplot(clover.dat,aes(x=Strain,y=NLevel)) + geom_boxplot() + geom_jitter()
clover.mod <- lm(NLevel ~ Strain, data = clover.dat)
clover.mod
op = par(mfrow=c(1,2))
plot(clover.mod,which = c(2,3))
library(emmeans)
means_clover = emmeans(clover.mod,~Strain)  # This preps an emmeans analysis, grouping by Culture
summary(means_clover,level = 0.95,infer = c(T,F))  # note setting level (1-alpha) for the confidence intervals
# infer = c(T,F) gives confidence intervals
# infer = c(F,T) gives p-values intervals. Here these are testing against the null hypothesis that mu_i = 0
# infer = c(T,T) gives both.
levels(clover.dat$Culture)
differences_vs_control = emmeans(clover.mod,trt.vs.ctrl~Culture,ref = 6)  # ref = 6, because the control is the 6th Culture
differences_vs_control = emmeans(clover.mod,trt.vs.ctrl~Strain,ref = 6)  # ref = 6, because the control is the 6th Culture
summary(differences_vs_control,level = 0.95,infer = c(T,T))$contrast
View(NO_data)
str(cover_asfactor)
levels(cover_asfactor)
cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ Cover, ref = 1)
cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# untransformed data
cover_vs_bare_emmeans = emmeans(NO_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# untransformed data
cover_vs_bare_emmeans = emmeans(NO_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# transformed ANOVA
anova(NO_log_model)
# ANOVA
anova(NO_model)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# untransformed data
cover_vs_bare_emmeans = emmeans(NO_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
anova(log_cover_vs_bare_emmeans)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
anova(log_cover_vs_bare_emmeans)
# detransform
log_cover_vs_bare_emmeans_dtrans = update(log_cover_vs_bare_emmeans,
tran = make.tran('boxcox', p = 0))
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# detransform
log_cover_vs_bare_emmeans_dtrans = update(log_cover_vs_bare_emmeans,
tran = make.tran('boxcox', p = 0))
# transformed data
log_cover_vs_bare_emmeans = emmeans(e^(NO_log_model), trt.vs.ctrl ~ cover_asfactor, ref = 1)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ e^(cover_asfactor), ref = 1)
# Ensure the data file is in the same directory as this document
germinant_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/Germination.csv')
NO_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/NO_data.csv')
NO_data = read.csv('~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/data/NO_data.csv')
str(NO_data)
NO_data$Plot <- as.factor(NO_data$Plot)
#just look at the data
plot(Flux ~ Cover, data=NO_data)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# untransformed data
cover_vs_bare_emmeans = emmeans(NO_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
e^-1.01
exp(-1.01)
E(-1.01)
E^-1.01
exp(-1.01)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
exp(-1.01)
exp()
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
exp(-1.01)
exp(-1.36)
exp(-1.09)
# untransformed data
cover_vs_bare_emmeans = emmeans(NO_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# inspect raw data
ggplot(NO_data, aes(x=cover_asfactor)) +
geom_boxplot(aes(y=Flux, group = cover_asfactor),position = position_identity()) +
ggtitle('N2O Flux by Cover Crop') + expand_limits(y=0)
# detransform
log_cover_vs_bare_emmeans_table = as.data.frame(log_cover_vs_bare_emmeans)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
exp(-1.01)
exp(-1.36)
exp(-1.09)
# untransformed data
cover_vs_bare_emmeans = emmeans(NO_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
# detransform
log_cover_vs_bare_emmeans_table = as.data.frame(log_cover_vs_bare_emmeans)
# detransform
log_cover_vs_bare_emmeans
log_cover_vs_bare_emmeans_table = as.data.frame(log_cover_vs_bare_emmeans)
# detrasnform
log_cover_vs_bare_emmeans_detrans = exp(log_cover_vs_bare_emmeans)
# detrasnform
log_cover_vs_bare_emmeans
# detrasnform
as.data.frame(log_cover_vs_bare_emmeans)
# transformed data
log_cover_vs_bare_emmeans = emmeans(NO_log_model, trt.vs.ctrl ~ cover_asfactor, ref = 1)
summary(log_cover_vs_bare_emmeans,level = 0.95,infer = c(T,T))$contrast
Mix_Bare_log_est <- -1.36
Mix_Bare_log_CIlow <- -1.088
# detransform
Grass_Bare_log_est <- -1.01
Grass_Bare_log_CIlow <- -1.28
Grass_Bare_log_CIhigh <- -0.729
Legume_Bare_log_est <- -1.36
Legume_Bare_log_CIlow <- -1.088
Legume_Bare_log_CIhigh <- -0.729
Mix_Bare_log_est <- -1.09
Mix_Bare_log_CIlow <- -1.36
Mix_Bare_log_CIhigh <- -0.810
# detransform
Grass_Bare_log_est <- exp(-1.01)
Grass_Bare_log_CIlow <- exp(-1.28)
Grass_Bare_log_CIhigh <- exp(-0.729)
Legume_Bare_log_est <- exp(-1.36)
Legume_Bare_log_CIlow <- exp(-1.088)
Legume_Bare_log_CIhigh <- exp(-0.729)
Mix_Bare_log_est <- exp(-1.09)
Mix_Bare_log_CIlow <- exp(-1.36)
Mix_Bare_log_CIhigh <- exp(-0.810)
# detransform
Grass_Bare_log_est <- exp(-1.01)
Grass_Bare_log_est
Grass_Bare_log_CIlow <- exp(-1.28)
Grass_Bare_log_CIlow
Grass_Bare_log_CIhigh <- exp(-0.729)
Grass_Bare_log_CIhigh
Legume_Bare_log_est <- exp(-1.36)
Legume_Bare_log_est
Legume_Bare_log_CIlow <- exp(-1.088)
Legume_Bare_log_CIlow
Legume_Bare_log_CIhigh <- exp(-0.729)
Legume_Bare_log_CIhigh
Mix_Bare_log_est <- exp(-1.09)
Mix_Bare_log_est
Mix_Bare_log_CIlow <- exp(-1.36)
Mix_Bare_log_CIlow
Mix_Bare_log_CIhigh <- exp(-0.810)
Mix_Bare_log_CIhigh
