set.seed(1) # this makes the results repeatable
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure a person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # their true baseline pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured pulse - includes some measurement error and is rounded to the nearest 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure a person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # their true baseline pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured pulse
simulation1_standing[i] = person_standing_i
}
print("Sitting data")
print(simulation1_sitting)
print("Standing data")
print(simulation1_standing)
simulation1_sitting_var <- var(simulation1_sitting)
simulation1_sitting_var
simulation1_standing_var <- var(simulation1_standing)
simulation1_standing_var
simulation1_sitting_se <- sd(simulation1_sitting) / sqrt(20)
simulation1_standing_se <- sd(simulation1_standing) / sqrt(20)
# delta-hat = mu2-hat - mu1-hat
effect <- mean(simulation1_standing) - mean(simulation1_sitting)
mu2 <- mean(simulation1_standing)
mu2
mu1 <- mean(simulation1_sitting)
mu1
effect
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
# solving the algebraic problem, (10+18+23+9+15+12+15+n)/8 = 15.5
15.5*8-(10+18+23+9+15+12+15)
hw1 <- c(10, 18, 23, 9, 15, 12, 15, 22)
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
hw1_mean <- sum(hw1)/8
mean_hw1
hw1_diff <- hw1 - mean_hw1
hw1_diff
hw1_sumdifsqr <- sum((diff_hw1)^2)
hw1_sumdifsqr
hw1_sd <- sqrt( sumdifsqr_hw1 / (8-1) )
hw1_sd
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
# you can use the answers to the intermediate results above directly rather than re-calculating them
hw1_se <- hw1_sd / sqrt(8)
hw1_se
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
# you can use the answers to the intermediate results above directly rather than re-calculating them
hw1_sd / hw1_mean
hw1_plus20 <- hw1 + 20
hw1_plus20_sd <- sd(hw1_plus20)
hw1_plus20_sd / mean(hw1_plus20)
set.seed(1) # this makes the results repeatable
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure a person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # their true baseline pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured pulse - includes some measurement error and is rounded to the nearest 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure a person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # their true baseline pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured pulse
simulation1_standing[i] = person_standing_i
}
print("Sitting data")
print(simulation1_sitting)
print("Standing data")
print(simulation1_standing)
simulation1_sitting_var <- var(simulation1_sitting)
simulation1_sitting_var
simulation1_standing_var <- var(simulation1_standing)
simulation1_standing_var
simulation1_sitting_se <- sd(simulation1_sitting) / sqrt(20)
simulation1_standing_se <- sd(simulation1_standing) / sqrt(20)
# delta-hat = mu2-hat - mu1-hat
effect <- mean(simulation1_standing) - mean(simulation1_sitting)
mu2 <- mean(simulation1_standing)
mu2
mu1 <- mean(simulation1_sitting)
mu1
effect
set.seed(1)
simulation2 = c()
for(i in 1:20) {
baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)   # baseline pulse of this person
standing_i_effect = rnorm(n=1,mean=10,sd = 2)   # effect of standing on the pulse for this person
sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))  # measured pulse when sitting
standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1)) # measured pulse when standing
treatment_effect_i = standing_pulse_i - sitting_pulse_i  # observed difference between sitting and standing for this person
simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))  # collect the results
}
simulation2
# First calculare the sample means
#seocnd calculate the delta-hat by calculating the absolute value of the difference
var1 <- var(sitting_pulse_i)
var1
?var
var1 <- var(sitting_pulse_i, y = NULL)
var1
var1 <- var(sitting_pulse_i, y = NULL, na.rm = FALSE)
var1
4047548552
916-267-1914
![Experimental design for effect of audience familiarity on aggressive interactions in the Amazon molly, _P. formosa_.] (~/Desktop/R_Projects/PLS205_Winter2021/PLS205_Winter2021/images/P.formosa_Familiarity_ExperimentalDesign.jpg)
?getwd
getwd()
# enter your code here. Do this using basic mathematics operators +,-,*,/ you don't need to use R functions
getwd()
hw1_mean <- sum(hw1)/8
hw1_mean
hw1_diff <- hw1 - mean_hw1
hw1_diff
hw1 <- c(10, 18, 23, 9, 15, 12, 15, 22)
hw1_mean <- sum(hw1)/8
hw1_mean
hw1_diff <- hw1 - mean_hw1
hw1_diff
hw1_sumdifsqr <- sum((diff_hw1)^2)
hw1_sumdifsqr
hw1_sd <- sqrt( sumdifsqr_hw1 / (8-1) )
hw1_sd
# solving the algebraic problem, (10+18+23+9+15+12+15+n)/8 = 15.5
15.5*8-(10+18+23+9+15+12+15)
hw1 <- c(10, 18, 23, 9, 15, 12, 15, 22)
hw1_mean <- sum(hw1)/8                   # recalculating the mean
hw1_mean
hw1_diff <- hw1 - mean_hw1               # calculating the difference
hw1_diff
hw1_sumdifsqr <- sum((diff_hw1)^2)       # adding up the square of the difference
hw1_sumdifsqr
hw1_sd <- sqrt( sumdifsqr_hw1 / (8-1) )  # square root of the sum of the square of the difference
hw1_sd                                   # print the standard deviation
hw1_cv <- hw1_sd / hw1_mean # calculating the coefficient of variation
hw1_cv                      # print the coeff. of var.
hw1_mean <- sum(hw1)/8                   # recalculating the mean
hw1_mean
hw1_diff <- hw1 - hw1_mean               # calculating the difference
hw1_diff
hw1_sumdifsqr <- sum((hw1_diff)^2)       # adding up the square of the difference
hw1_sumdifsqr
hw1_sd <- sqrt( hw1_sumdifsqr / (8-1) )  # square root of the sum of the square of the difference
hw1_sd                                   # print the standard deviation
hw1_se <- hw1_sd / sqrt(8) # calculating the standard error
hw1_se                     # print the standard error
hw1_cv <- hw1_sd / hw1_mean # calculating the coefficient of variation
hw1_cv                      # print the coeff. of var.
hw1_mm <- hw1 * 10
hw1_mm_mean <- mean(hw1_mm)                   # recalculating the mean
hw1_mm_diff <- hw1_mm - hw1_mm_mean               # calculating the difference
hw1_mm_sumdifsqr <- sum((hw1_mm_diff)^2)       # adding up the square of the difference
hw1_mm_sd <- sqrt( hw1_mm_sumdifsqr / (8-1) )  # square root of the sum of the square of the difference
hw1_mm_sd                                      # print the standard deviation
hw1_mm_sd                                      # print the standard deviation
hw1_mm_cv <- hw1_mm_sd / hw1_mm_mean # calculating the coefficient of variation
hw1_mm_cv
hw1_mm_sd <- sqrt( hw1_mm_sumdifsqr / (8-1) )  # square root of the sum of the square of the difference
hw1_mm_sd                                      # print the standard deviation
hw1_mm_cv <- hw1_mm_sd / hw1_mm_mean # calculating the coefficient of variation
hw1_mm_cv
hw1_plus20_sd <- sd(hw1_plus20)
hw1_plus20_sd
hw1_plus20_cv <- hw1_plus20_sd / mean(hw1_plus20)
hw1_plus20_cv
simulation1_sitting_se <- sd(simulation1_sitting) / sqrt(20)
simulation1_sitting_se
baseline1_sitting_se <- sd(baseline_i_sitting) / sqrt(20)
baseline1_sitting_se
baseline_i_sitting_se <- 10 / sqrt(20)
baseline_i_sitting_se
baseline_i_standig_se <- 10 / sqrt(20)
baseline_i_standig_se
set.seed(1) # this makes the results repeatable
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure a person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # their true baseline pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured pulse - includes some measurement error and is rounded to the nearest 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure a person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # their true baseline pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured pulse
simulation1_standing[i] = person_standing_i
}
print("Sitting data")
print(simulation1_sitting)
print("Standing data")
print(simulation1_standing)
simulation1_sitting_var <- var(simulation1_sitting)
simulation1_sitting_var
simulation1_standing_var <- var(simulation1_standing)
simulation1_standing_var
baseline_i_sitting_se <- 10 / sqrt(20)
baseline_i_sitting_se
baseline_i_standig_se <- 10 / sqrt(20)
baseline_i_standig_se
baseline_i_sitting_se
baseline_i_standig_se
baseline_i_sitting_cv <- 10 / 80
baseline_i_sitting_cv
baseline_i_standig_cv <- 10 / 90
baseline_i_standig_cv
baseline_i_sitting_cv <- 10 / 80
baseline_i_sitting_cv
baseline_i_standig_cv <- 10 / 90
baseline_i_standig_cv
baseline_i_sitting_cv
baseline_i_standig_cv
baseline_i_sitting_cv <- 10 / ((80+90)/2)
baseline_i_sitting_cv
baseline_i_cv <- 10 / ((80+90)/2)
baseline_i_cv
simulation1_standing_effect <- mean(simulation1_standing) - mean(simulation1_sitting)
simulation1_standing_effect
simulation1_sitting_sd <- sd(simulation1_sitting) / sqrt(20)
simulation1_sitting_sd
simulation1_standing_sd <- sd(simulation1_standing) / sqrt(20)
simulation1_standing_sd
simulation1_sitting_sd
simulation1_standing_sd
simulation1_error
simulation1_error <- simulation1_standing_effect - 10
simulation1_error
simulation1_sw <- 12.3 / sqrt(20)
simulation1_se
simulation1_se <- 12.3 / sqrt(20)
simulation1_se
simulation1_se <- 12.3 / sqrt(20)
simulation1_se
set.seed(1)
simulation2 = c()
for(i in 1:20) {
baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)   # baseline pulse of this person
standing_i_effect = rnorm(n=1,mean=10,sd = 2)   # effect of standing on the pulse for this person
sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))  # measured pulse when sitting
standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1)) # measured pulse when standing
treatment_effect_i = standing_pulse_i - sitting_pulse_i  # observed difference between sitting and standing for this person
simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))  # collect the results
}
simulation2
simulation2_effect <- mean(simulation2$Effect)
simulation2_effect
simulation2_effect <- mean(simulation2$sitting) - mean(simulation2$Standing)
simulation2_effect
simulation2_effect <- mean(simulation2$sitting) - mean(simulation2$Standing)
simulation2_effect <- mean(simulation2$Effect)
simulation2_effect
simulation2_sit_var <- sd(simulation2$Sitting) / mean(simulation2$Sitting)
simulation2_stand_var <- sd(simulation2$Standing) / mean(simulation2$Standing)
simulation2_sit_var
simulation2_stand_var
simulation1_sitting_var
simulation1_sitting_var <- sd(simulation1_sitting) / mean(simulation1_sitting)
simulation1_sitting_var
simulation2_sit_var
simulation2_sit_var
simulation1_sitting_var
simulation1_standing_var <- sd(simulation1_standing) / mean(simulation1_standing)
simulation1_standing_var
simulation2_stand_var
simulation1_standing_var <- sd(simulation1_standing) / mean(simulation1_standing)
simulation1_standing_var
simulation2_stand_var
simulation1_standing_var
simulation1_standing_effect
set.seed(1)
# repeat experiment-type1 100 times
type_1_results = c()
for(j in 1:100) {  # Each iteration of this for-loop we run both the Type1 and Type2 experiments
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # true pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse - rounded to the 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # true pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse
simulation1_standing[i] = person_standing_i
}
type_1_results[j] = mean(simulation1_standing) - mean(simulation1_sitting)
}
# repeat experiment-type2 100 times
type_2_results = c()
for(j in 1:100) {
simulation2 = c()
for(i in 1:20) {
baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)
standing_i_effect = rnorm(n=1,mean=10,sd = 2)
sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))
standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1))
treatment_effect_i = standing_pulse_i - sitting_pulse_i
simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))
}
type_2_results[j] = mean(simulation2$Effect)
}
boxplot(list(Type1 = type_1_results,Type2 = type_2_results))
# abline(h = 10)
type1_sd <- sd(type_1_results)
type1_sd
type2_sd <- sd(type_2_results)
type2_sd <- sd(type_2_results)
type2_sd
type1_sd <- sd(type_1_results)
type1_sd
type2_sd
set.seed(1)
# repeat experiment-type1 100 times
type_1_results = c()
for(j in 1:100) {  # Each iteration of this for-loop we run both the Type1 and Type2 experiments
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # true pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse - rounded to the 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # true pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse
simulation1_standing[i] = person_standing_i
}
type_1_results[j] = mean(simulation1_standing) - mean(simulation1_sitting)
}
# repeat experiment-type2 100 times
type_2_results = c()
for(j in 1:100) {
simulation2 = c()
for(i in 1:20) {
baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)
standing_i_effect = rnorm(n=1,mean=10,sd = 2)
sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))
standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1))
treatment_effect_i = standing_pulse_i - sitting_pulse_i
simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))
}
type_2_results[j] = mean(simulation2$Effect)
}
boxplot(list(Type1 = type_1_results,Type2 = type_2_results))
# abline(h = 10)
sd(simulation2_effect)
sd <- sd(simulation2_effect)
sd
type2_se <- 10 / sqrt(10)
type2_se
type2_se <- 10 / sqrt(10)
type2_se
simulation1_standing_effect <- mean(simulation1_standing) - mean(simulation1_sitting)
simulation1_standing_effect
simulation2_effect <- mean(simulation2$Effect)
simulation2_effect
# solving the algebraic problem, (10+18+23+9+15+12+15+n)/8 = 15.5
15.5*8-(10+18+23+9+15+12+15)
hw1 <- c(10, 18, 23, 9, 15, 12, 15, 22)
hw1_mean <- sum(hw1)/8                   # recalculating the mean
hw1_mean
hw1_diff <- hw1 - hw1_mean               # calculating the difference
hw1_diff
hw1_sumdifsqr <- sum((hw1_diff)^2)       # adding up the square of the difference
hw1_sumdifsqr
hw1_sd <- sqrt( hw1_sumdifsqr / (8-1) )  # square root of the sum of the square of the difference
hw1_sd                                   # print the standard deviation
hw1_se <- hw1_sd / sqrt(8) # calculating the standard error
hw1_se                     # print the standard error
hw1_cv <- hw1_sd / hw1_mean # calculating the coefficient of variation
hw1_cv                      # print the coeff. of var.
hw1_mm <- hw1 * 10
hw1_mm_mean <- mean(hw1_mm)                   # recalculating the mean
hw1_mm_diff <- hw1_mm - hw1_mm_mean               # calculating the difference
hw1_mm_sumdifsqr <- sum((hw1_mm_diff)^2)       # adding up the square of the difference
hw1_mm_sd <- sqrt( hw1_mm_sumdifsqr / (8-1) )  # square root of the sum of the square of the difference
hw1_mm_sd                                      # print the standard deviation
hw1_mm_cv <- hw1_mm_sd / hw1_mm_mean # calculating the coefficient of variation
hw1_mm_cv
hw1_plus20 <- hw1 + 20
hw1_plus20_sd <- sd(hw1_plus20)
hw1_plus20_sd
hw1_plus20_cv <- hw1_plus20_sd / mean(hw1_plus20)
hw1_plus20_cv
set.seed(1) # this makes the results repeatable
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure a person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # their true baseline pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured pulse - includes some measurement error and is rounded to the nearest 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure a person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # their true baseline pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured pulse
simulation1_standing[i] = person_standing_i
}
print("Sitting data")
print(simulation1_sitting)
print("Standing data")
print(simulation1_standing)
baseline_i_cv <- 10 / ((80+90)/2)
baseline_i_cv
baseline_i_sitting_se <- 10 / sqrt(20)
baseline_i_sitting_se
baseline_i_standig_se <- 10 / sqrt(20)
baseline_i_standig_se
simulation1_standing_effect <- mean(simulation1_standing) - mean(simulation1_sitting)
simulation1_standing_effect
simulation1_se <- 12.3 / sqrt(20)
simulation1_se
set.seed(1)
simulation2 = c()
for(i in 1:20) {
baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)   # baseline pulse of this person
standing_i_effect = rnorm(n=1,mean=10,sd = 2)   # effect of standing on the pulse for this person
sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))  # measured pulse when sitting
standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1)) # measured pulse when standing
treatment_effect_i = standing_pulse_i - sitting_pulse_i  # observed difference between sitting and standing for this person
simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))  # collect the results
}
simulation2
simulation2_effect <- mean(simulation2$Effect)
simulation2_effect
simulation2_sit_var <- sd(simulation2$Sitting) / mean(simulation2$Sitting)
simulation2_sit_var
simulation1_sitting_var <- sd(simulation1_sitting) / mean(simulation1_sitting)
simulation1_sitting_var
simulation2_stand_var <- sd(simulation2$Standing) / mean(simulation2$Standing)
simulation2_stand_var
simulation1_standing_var <- sd(simulation1_standing) / mean(simulation1_standing)
simulation1_standing_var
set.seed(1)
# repeat experiment-type1 100 times
type_1_results = c()
for(j in 1:100) {  # Each iteration of this for-loop we run both the Type1 and Type2 experiments
simulation1_sitting = c()
simulation1_standing = c()
for(i in 1:20) {
# measure person sitting
baseline_i_sitting = rnorm(n = 1,mean = 80,sd = 10)  # true pulse
person_sitting_i = round(baseline_i_sitting + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse - rounded to the 1 bpm
simulation1_sitting[i] = person_sitting_i
# measure person standing
baseline_i_standing = rnorm(n = 1,mean = 90,sd = 10) # true pulse
person_standing_i = round(baseline_i_standing + rnorm(n=1,mean = 0,sd = 1)) # measured_pulse
simulation1_standing[i] = person_standing_i
}
type_1_results[j] = mean(simulation1_standing) - mean(simulation1_sitting)
}
# repeat experiment-type2 100 times
type_2_results = c()
for(j in 1:100) {
simulation2 = c()
for(i in 1:20) {
baseline_i_pulse = rnorm(n=1,mean=80,sd = 10)
standing_i_effect = rnorm(n=1,mean=10,sd = 2)
sitting_pulse_i = round(baseline_i_pulse + rnorm(1,0,1))
standing_pulse_i = round(baseline_i_pulse + standing_i_effect + rnorm(1,0,1))
treatment_effect_i = standing_pulse_i - sitting_pulse_i
simulation2 = rbind(simulation2,data.frame(Person = i, Sitting = sitting_pulse_i, Standing = standing_pulse_i, Effect = treatment_effect_i))
}
type_2_results[j] = mean(simulation2$Effect)
}
boxplot(list(Type1 = type_1_results,Type2 = type_2_results))
# abline(h = 10)
type1_sd <- sd(type_1_results)
type1_sd
type2_sd <- sd(type_2_results)
type2_sd
type2_se <- 10 / sqrt(10)
type2_se
data = data.frame(groupA = rnorm(10,3,1),groupB = rnorm(10,5,1))
# checks the data is coded correctly. This is important to do, but should not be included in the final output
str(data)
# performs and outputs the t-test. This should be included in the report
t.test(data$groupA,data$groupB, var.equal = TRUE)
data2 = data.frame(groupA = rnorm(10,3,1),groupB = rnorm(10,5,1))
# checks the data is coded correctly
str(data2)
# performs and outputs the t-test
t.test(data2$groupA,data2$groupB, var.equal = TRUE)
# use comments in chunks for notes about what the code does
# DON'T USE these comments to give your answers!!
SumSS = 37
SumSS
data("CO2")
lm_model = lm(uptake~Treatment,CO2)
lm_anova = anova(lm_model)
lm_anova
# extract statistics from ANOVA
Df_Treatment = lm_anova$Df[1]
Df_Residuals = lm_anova$Df[2]
F_Treatment = lm_anova$`F value`[1]
p_Treatment = lm_anova$`Pr(>F)`[1]
barley_data <- data.frame(Var1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), Var2 = c(1, 2, 3, 4, 5, 6.1, 7.3, 8.2, 9, 10, 11))
barley_data <- data.frame(
Var1 = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
Var2 = c(1, 2, 3, 4, 5, 6.1, 7.3, 8.2, 9, 10, 11)
)
variable<-function(x){(sd(x)/sqrt(length(x)))+mean(x)}
variable <- function(x) { (sd(x) / sqrt(length(x))) + mean(x) }
# Calculate the mean:
mean1 = mean(c(1, 2, 3, 4, 5))
mean1
mean1 = mean(c(1, 2, 3, 4, 5))
mean1
library(ggplot2)
data = data.frame(X = rnorm(20), Group = rep(c('Control','Treatment'),10))
data$Y = data$X + rnorm(20)
# make a traditional R plot
with(data,plot(Y~X,col = Group,main = 'Trt vs Control',xlab = 'Size',ylab = 'Mass'))
simulation1_stand_var <- sd(simulation1_standing) / mean(simulation1_standing)
simulation1_stand_var
